[workspace]
name = "fundamentals-workshop"
version = "0.1.0"
authors = ["ejolly <eshin.jolly@gmail.com>"]
channels = ["ejolly", "conda-forge"]
platforms = ["osx-arm64", "osx-64"]
repository = "https://github.com/psyc-201/fundamentals-workshop/"

# Use pixi add someLibrary to install Python packages
# Use pixi add r-someLibrary to isntall R packages
# This file will be auto-updated for you!
[dependencies]
python = ">=3.11" 
r-base = ">4.3"
pymer4 = ">=0.9.2"
ipykernel = ">=6.29.5,<7"
ruff = ">=0.12.2,<0.13"
jupyter = ">=1.1.1,<2"
quarto = ">=1.7.32,<2"
jupyter-cache = ">=1.0.1,<2"
seaborn = ">=0.13.2,<0.14"
r-skimr = ">=2.2.1,<3"
r-visdat = ">=0.6.0,<0.7"
r-dt = ">=0.34.0,<0.35"
r-tidyverse = ">=2.0.0,<3"
r-knitr = ">=1.50,<2"
r-languageserver = ">=0.3.16,<0.4"
r-rmarkdown = ">=2.29,<3"
r-irkernel = ">=1.3.2,<2"
r-rlang = ">=1.1.6,<2"
r-jsonlite = ">=2.0.0,<3"

# Python syntax-checking settings
[tool.ruff]
extend-include = ["*.ipynb", "*.qmd"]
[tool.ruff.lint]
ignore = ["W292", "E501", "E731", "E741", "F401", "E703"]

# Tasks are shell commands we can call with pixi run myTask
# We include some to help setup and run various quarto commands
[tasks]

# pixi run setup - sets up R and Python
setup = [
{ task = "setup_rkernel" }, 
{ task = "setup_pykernel" }]

# pixi run render - creates live preview for all qmd, ipynb, and md files in code/
render = "quarto preview code/"

# pixi run r - starts an R console
r = "R"


# pixi run build - saming thing as render but doesn't keep the live preview open
build = "quarto render code/"

# pixi run preview myfile.qmd - live preview of just a single file
[tasks.preview]
args =["name"]
cmd = "quarto preview code/{{ name }}"

# pixi run convert myfile.qmd - will generate myfile.ipynb
# pixi run convert myfile.ipynb - will generate myfile.qmd
[tasks.convert]
args =["name"]
cmd = "quarto convert code/{{ name }}"

# Register an R kernelspec INSIDE THIS ENV (no HOME pollution).
# prefix := dirname(R.home('share')) → <env>/share/jupyter/kernels
[tasks.setup_rkernel]
cmd = """R -q -e "prefix <- normalizePath(file.path(R.home('home'), '..', '..')); IRkernel::installspec(name='fundamentals-workshop-R', displayname='R (fundamentals-workshop)', user=FALSE, prefix=prefix, verbose=TRUE)" """

# Register a Python kernelspec INSIDE THIS ENV (no HOME pollution).
# prefix := sysconfig.get_paths()['data'] → <env>/share/jupyter/kernels
[tasks.setup_pykernel]
cmd = "python -c \"import sys, sysconfig, subprocess; p=sysconfig.get_paths()['data']; subprocess.check_call([sys.executable,'-m','ipykernel','install','--name','fundamentals-workshop-py','--display-name','Python (fundamentals-workshop)','--prefix',p])\""

# pixi run kernelslist - shows what kernels jupyter is aware of; mostly for debugging issues
[tasks.kernelslist]
cmd = "jupyter kernelspec list"

